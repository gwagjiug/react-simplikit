name: Integration

on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - fix/integration

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Run linter
        run: |
          corepack enable
          yarn install
          yarn run lint

  check-changes:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.filter.outputs.changed }}
      changed_files: ${{ steps.filter.outputs.changed_files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Check for changes in .ts and .tsx files
        id: filter
        uses: dorny/paths-filter@v3
        with:
          list-files: shell
          filters: |
            changed:
              - 'src/components/**/*.ts'
              - 'src/components/**/*.tsx'
              - 'src/hooks/**/*.ts'
              - 'src/hooks/**/*.tsx'
              - 'src/utils/**/*.ts'
              - 'src/utils/**/*.tsx'

  verify-documentation:
    runs-on: ubuntu-latest
    needs: check-changes
    if: ${{ needs.check-changes.outputs.changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify documentation exists
        run: |
          for file in ${{ needs.check-changes.outputs.changed_files }}; do
            dir_name=$(basename $(dirname "$file"))
            base_name=$(basename $dir_name)

            doc_file="$(dirname "$file")/$base_name.md"
            
            if [ ! -f "$doc_file" ]; then
              echo "Documentation missing for $base_name"
              exit 1
            fi
          done

  verify-test:
    runs-on: ubuntu-latest
    needs: check-changes
    if: ${{ needs.check-changes.outputs.changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: |
          corepack enable
          yarn install

      - name: Run tests and generate coverage
        run: yarn run test:coverage

      - name: Verify test coverage
        run: |
          changed_files="${{ needs.check-changes.outputs.changed_files }}"
          coverage_file="coverage/coverage-final.json"

          if [ ! -f "$coverage_file" ]; then
            echo "Coverage file not found!"
            exit 1
          fi          

          for file in $changed_files; do
            dir_name=$(basename $(dirname "$file"))
            base_name=$(basename $dir_name)
            test_file="$(dirname "$file")/$base_name.spec.ts"

            if [ ! -f "$test_file" ]; then
              test_file="$(dirname "$file")/$base_name.spec.tsx"

              if [ ! -f "$test_file" ]; then
                echo "Test file missing for $base_name"
                exit 1
              fi
            fi

            # Debugging: Print the file path
            echo "Checking coverage for: $file"

            # Extract coverage data for the file using base_name
            coverage_data=$(jq -r --arg file "$file_to_check" '. | to_entries[] | select(.key | contains($file)) | .value' "$coverage_file")

            if [ -z "$coverage_data" ]; then
              echo "No coverage data found for $file_to_check"
              exit 1
            fi

            total_lines=0
            covered_lines=0

            # 각 커버리지 데이터 항목을 순회
            for entry in $(echo "$coverage_data" | jq -c '.s | to_entries[]'); do
              line_coverage=$(echo "$entry" | jq -r '.value')

              # 총 라인 수와 커버된 라인 수 계산
              total_lines=$((total_lines + 1))
              if [ "$line_coverage" -gt 0 ]; then
                covered_lines=$((covered_lines + 1))
              fi
            done

            # Calculate overall coverage percentage
            coverage=$(echo "scale=2; ($covered_lines / $total_lines) * 100" | bc)

            # Debugging: Print accumulated total and covered lines
            echo "Total lines: $total_lines, Covered lines: $covered_lines"
            echo "Coverage: $coverage%"

            # Check if coverage is 100%
            if (( $(echo "$coverage < 100" | bc -l) )); then
              echo "Overall test coverage is not 100%: $coverage%"
              exit 1
            else
              echo "Test coverage is 100%."
            fi
          done

  verify-jsdoc:
    runs-on: ubuntu-latest
    needs: check-changes
    if: ${{ needs.check-changes.outputs.changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for JSDoc comments
        run: |
          for file in ${{ needs.check-changes.outputs.changed_files }}; do
            dir_name=$(basename $(dirname "$file"))
            base_name=$(basename $dir_name)
            implementation="$(dirname "$file")/$base_name.ts"

            if [ ! -f "$implementation" ]; then
              implementation="$(dirname "$file")/$base_name.tsx"

              if [ ! -f "$implementation" ]; then
                echo "Implementation missing for $file"
                exit 1
              fi
            fi

            if ! grep -q "/\*\*" "$implementation"; then
              echo "JSDoc comments missing in $implementation"
              exit 1
            fi

            if ! grep -q "@description" "$implementation"; then
              echo "@description tag missing in $implementation"
              exit 1
            fi

            if ! grep -q "@example" "$implementation"; then
              echo "@example tag missing in $implementation"
              exit 1
            fi
          done
